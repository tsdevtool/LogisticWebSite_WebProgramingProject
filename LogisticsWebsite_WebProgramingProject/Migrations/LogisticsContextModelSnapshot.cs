// <auto-generated />
using System;
using LogisticsWebsite_WebProgramingProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogisticsWebsite_WebProgramingProject.Migrations
{
    [DbContext(typeof(LogisticsContext))]
    partial class LogisticsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BillID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<int>("BookingNo")
                        .HasColumnType("int");

                    b.Property<int>("ContainerId")
                        .HasColumnType("int")
                        .HasColumnName("ContainerID");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("BillId")
                        .HasName("PK_Booking");

                    b.HasIndex("BookingNo");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("BillOfLading", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BookingInfomation", b =>
                {
                    b.Property<int>("BookingNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingNo"));

                    b.Property<string>("Commodity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("CutOffCy")
                        .HasColumnType("date")
                        .HasColumnName("CutOffCY");

                    b.Property<DateOnly>("CutOffSi")
                        .HasColumnType("date")
                        .HasColumnName("CutOffSI");

                    b.Property<double>("CutOffVgm")
                        .HasColumnType("float")
                        .HasColumnName("CutOffVGM");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("PriceOwner")
                        .HasColumnType("bit");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserID");

                    b.HasKey("BookingNo")
                        .HasName("PK_PackageInfomation");

                    b.HasIndex("UserId");

                    b.ToTable("BookingInfomation", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BookingWareHouse", b =>
                {
                    b.Property<int>("No")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("No"));

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("BillID");

                    b.Property<DateOnly>("Dayin")
                        .HasColumnType("date");

                    b.Property<int>("WhareHouseId")
                        .HasColumnType("int")
                        .HasColumnName("WhareHouseID");

                    b.HasKey("No")
                        .HasName("PK_Booking-WhareHouse");

                    b.HasIndex("BillId");

                    b.HasIndex("WhareHouseId");

                    b.ToTable("Booking-WareHouse", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Container", b =>
                {
                    b.Property<int>("ContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContainerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContainerId"));

                    b.Property<double>("CargoWeight")
                        .HasColumnType("float");

                    b.Property<string>("ContainerSize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<byte>("NumberOfContainer")
                        .HasColumnType("tinyint");

                    b.Property<string>("PlaceToPickUp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.HasKey("ContainerId");

                    b.ToTable("Container", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.CostsIncurred", b =>
                {
                    b.Property<int>("CostsIncurredId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CostsIncurredID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostsIncurredId"));

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("BillID");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("CostsIncurredId");

                    b.HasIndex("BillId");

                    b.ToTable("CostsIncurred", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("BillID");

                    b.Property<int?>("CostsIncurredId")
                        .HasColumnType("int")
                        .HasColumnName("CostsIncurredID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal>("Surcharge")
                        .HasColumnType("money");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.HasKey("Id")
                        .HasName("PK_Bill");

                    b.HasIndex("BillId");

                    b.HasIndex("CostsIncurredId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Port", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PortId");

                    b.ToTable("Port", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateOnly>("DayCome")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DayGo")
                        .HasColumnType("date");

                    b.Property<int>("Pod")
                        .HasColumnType("int")
                        .HasColumnName("POD");

                    b.Property<int>("Pol")
                        .HasColumnType("int")
                        .HasColumnName("POL");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShipId")
                        .HasColumnType("int")
                        .HasColumnName("ShipID");

                    b.Property<TimeOnly?>("TimeGo")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.HasIndex("Pod");

                    b.HasIndex("Pol");

                    b.HasIndex("ShipId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipId"));

                    b.Property<string>("ShipCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength();

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ShipId");

                    b.ToTable("Ship", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Tracking", b =>
                {
                    b.Property<int>("TrackingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TrackingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingId"));

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("BillID");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrackingId");

                    b.HasIndex("BillId");

                    b.ToTable("Tracking", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.WareHouse", b =>
                {
                    b.Property<int>("WhareHouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WhareHouseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WhareHouseId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.HasKey("WhareHouseId")
                        .HasName("PK_WhareHouse");

                    b.ToTable("WareHouse", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.BookingInfomation", "BookingNoNavigation")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("BookingNo")
                        .IsRequired()
                        .HasConstraintName("FK_BillOfLading_BookingInfomation");

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.Container", "Container")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("ContainerId")
                        .IsRequired()
                        .HasConstraintName("FK_BillOfLading_Container1");

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.Schedule", "Schedule")
                        .WithMany("BillOfLadings")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_BillOfLading_Schedule1");

                    b.Navigation("BookingNoNavigation");

                    b.Navigation("Container");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BookingInfomation", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BookingWareHouse", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", "Bill")
                        .WithMany("BookingWareHouses")
                        .HasForeignKey("BillId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking-WhareHouse_Booking");

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.WareHouse", "WhareHouse")
                        .WithMany("BookingWareHouses")
                        .HasForeignKey("WhareHouseId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking-WhareHouse_WhareHouse");

                    b.Navigation("Bill");

                    b.Navigation("WhareHouse");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.CostsIncurred", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", "Bill")
                        .WithMany("CostsIncurreds")
                        .HasForeignKey("BillId")
                        .IsRequired()
                        .HasConstraintName("FK_CostsIncurred_BillOfLading");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Invoice", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", "Bill")
                        .WithMany("Invoices")
                        .HasForeignKey("BillId")
                        .IsRequired()
                        .HasConstraintName("FK_Invoice_BillOfLading");

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.CostsIncurred", "CostsIncurred")
                        .WithMany("Invoices")
                        .HasForeignKey("CostsIncurredId")
                        .HasConstraintName("FK_Invoice_CostsIncurred");

                    b.Navigation("Bill");

                    b.Navigation("CostsIncurred");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Schedule", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.Port", "PodNavigation")
                        .WithMany("SchedulePodNavigations")
                        .HasForeignKey("Pod")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Port");

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.Port", "PolNavigation")
                        .WithMany("SchedulePolNavigations")
                        .HasForeignKey("Pol")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Port1");

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.Ship", "Ship")
                        .WithMany("Schedules")
                        .HasForeignKey("ShipId")
                        .HasConstraintName("FK_Schedule_Ship");

                    b.Navigation("PodNavigation");

                    b.Navigation("PolNavigation");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Tracking", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", "Bill")
                        .WithMany("Trackings")
                        .HasForeignKey("BillId")
                        .IsRequired()
                        .HasConstraintName("FK_Tracking_BillOfLading");

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LogisticsWebsite_WebProgramingProject.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BillOfLading", b =>
                {
                    b.Navigation("BookingWareHouses");

                    b.Navigation("CostsIncurreds");

                    b.Navigation("Invoices");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.BookingInfomation", b =>
                {
                    b.Navigation("BillOfLadings");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Container", b =>
                {
                    b.Navigation("BillOfLadings");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.CostsIncurred", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Port", b =>
                {
                    b.Navigation("SchedulePodNavigations");

                    b.Navigation("SchedulePolNavigations");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Schedule", b =>
                {
                    b.Navigation("BillOfLadings");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.Ship", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("LogisticsWebsite_WebProgramingProject.Models.WareHouse", b =>
                {
                    b.Navigation("BookingWareHouses");
                });
#pragma warning restore 612, 618
        }
    }
}
